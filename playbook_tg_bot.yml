---
- name: Install PostgreSQL
  hosts: servers
  become: true

  tasks:
    - name: Install curl ca-certificates
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - curl
        - ca-certificates

    - name: Add pgdg repo to sources.list.d
      lineinfile:
        path: /etc/apt/sources.list.d/pgdg.list
        line: "deb http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main"
        create: true

    - name: Download PostgreSQL key and add it to system keyring
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install PostgreSQL
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - postgresql
        - postgresql-contrib

- name: Настройка Postgres master
  hosts: db_server1
  become: true
  become_user: postgres

  vars_files:
    - vars.yml

  tasks:
    - name: Set env variables
      shell: psql -c "SHOW config_file;"
      register: directory_result

    - name: Извлечение пути к каталогу из вывода
      set_fact:
        directory_path: "{{ directory_result.stdout | regex_search('\/etc.*main') }}"

    - name: Вывод значения data_directory_path
      debug:
        msg: "Значение directory_path: {{ directory_path }}"

    - name: Configure "postgres.conf"
      command: |
        psql 
        -c "ALTER ROLE {{ DB_USER }} PASSWORD '{{ DB_PASSWORD }}';" \
        -c "CREATE USER {{ DB_REPL_USER }} WITH REPLICATION ENCRYPTED PASSWORD '{{ DB_REPL_PASSWORD }}';" \
        -c "SELECT pg_create_physical_replication_slot('replication_slot');" \
        -c "ALTER SYSTEM SET listen_addresses='*'" \
        -c "ALTER SYSTEM SET archive_mode=on" \
        -c "ALTER SYSTEM SET archive_command='cp %p /oracle/pg_data/archive/%f'" \
        -c "ALTER SYSTEM SET max_wal_senders=10" \
        -c "ALTER SYSTEM SET wal_level=replica" \
        -c "ALTER SYSTEM SET wal_log_hints=on" \
        -c "ALTER SYSTEM SET log_replication_commands=on" \

        -c "ALTER SYSTEM SET logging_collector=on" \
        -c "ALTER SYSTEM SET log_filename='pglog.log'" \
        -c "ALTER SYSTEM SET log_directory='log'" \
        -c "ALTER SYSTEM SET log_rotation_size=0" \
        -c "ALTER SYSTEM SET log_truncate_on_rotation=on" \
        -c "ALTER SYSTEM SET archive_mode=on;" \
        -c "SELECT pg_reload_conf();"

    - name: Create database
      command: |
        psql 
        -c "DROP DATABASE IF EXISTS {{ DB_DATABASE }};" \
        -c "CREATE DATABASE {{ DB_DATABASE }};"

    - name: Configure database
      command: |
        psql db_telegram_bot
        -c "CREATE TABLE IF NOT EXISTS emails ( id SERIAL PRIMARY KEY, email VARCHAR(255) NOT NULL);" \
        -c "CREATE TABLE IF NOT EXISTS phones ( id SERIAL PRIMARY KEY, phone VARCHAR(255) NOT NULL);" \
        -c "CREATE EXTENSION file_fdw; CREATE SERVER pglog FOREIGN DATA WRAPPER file_fdw; CREATE FOREIGN TABLE pglog ( log_line text ) SERVER pglog OPTIONS (filename 'log/pglog.log', format 'text');"

    - name: Configure "pg_hba.conf"
      blockinfile:
        dest: "{{ directory_path }}/pg_hba.conf"
        block: |
          host all all 0.0.0.0/0 password
          host    replication     {{ DB_REPL_USER }}       0.0.0.0/0                md5
    
- name: Restart postgres
  hosts: db_server1
  become: true
  tasks:
    - name: Create directory for archive
      command: mkdir -p /oracle/pg_data/archive

    - name: Own postgres for archive directory
      command: chown -R postgres:postgres /oracle/pg_data/archive
      
    - name: Restart postgres
      service:
        name: postgresql
        state: restarted

- name: Настройка Postgres slave
  hosts: db_server2

  vars_files:
    - vars.yml

  tasks:
    - name: Set env variables
      become: true
      become_user: postgres
      shell: psql -c "SHOW data_directory;"
      register: data_directory_result

    - name: Извлечение пути к каталогу из вывода
      set_fact:
        data_directory_path: "{{ data_directory_result.stdout | regex_search('\/var.*main') }}"

    - name: Вывод значения data_directory_path
      debug:
        msg: "Значение data_directory_path: {{ data_directory_path }}"

    - name: Configure "postgres.conf"
      become: true
      become_user: postgres
      command: psql -c "ALTER SYSTEM SET listen_addresses='*'"

    - name: Stop postgres
      become: true
      service:
        name: postgresql
        state: stopped

    - name: Remove main directory
      become: true
      become_user: postgres
      command: rm -rf {{ data_directory_path }}

    - name: Run pg_basebackup for replication
      become: true
      become_user: postgres
      expect:
        command: "pg_basebackup -R -h {{ DB_HOST }} -U {{ DB_REPL_USER }} -D {{ data_directory_path }} -P"
        responses:
          "Password:": "{{ DB_REPL_PASSWORD }}\n"

    - name: Start postgres
      become: true
      service:
        name: postgresql
        state: restarted


- name: Setup telegram bot
  hosts: bot_server

  vars_files:
    - vars.yml

  tasks:
    - name: Install Python
      become: true
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3.11
        - python3-pip

    - name: Download files
      git:
        repo: https://github.com/MrSalatikRU/dev0ps.git
        dest: "{{ PROJECT_DEST }}"
        version: ansible-files
    
    - name: Install requirements
      pip:
        requirements: "{{ PROJECT_DEST }}/requirements.txt"

    - name: Create .env
      command: "touch {{ PROJECT_DEST }}/.env"

    - name: Full .env
      blockinfile:
        dest: "{{ PROJECT_DEST }}/.env"
        block: |
          TOKEN={{ TOKEN }}
          RM_HOST={{ RM_HOST }}
          RM_PORT={{ RM_PORT }}
          RM_USER={{ RM_USER }}
          RM_PASSWORD={{ RM_PASSWORD }}
          DB_HOST={{ DB_HOST }}
          DB_USER={{ DB_USER }}
          DB_PASSWORD={{ DB_PASSWORD }}
          DB_PORT={{ DB_PORT }}
          DB_DATABASE={{ DB_DATABASE }}
          PROJECT_DEST={{ PROJECT_DEST }}

    - name: Start bot
      command: python3 {{ PROJECT_DEST }}/bot.py